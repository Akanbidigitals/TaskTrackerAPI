// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskTrackerAPI.DataAccess.DataContext;

#nullable disable

namespace TaskTrackerAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.19");

            modelBuilder.Entity("TaskTrackerAPI.Domain.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AssignToId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignToId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TaskTrackerAPI.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1009d1c-47bd-40f5-85d9-a192cc3a6499"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 41, 58, 794, DateTimeKind.Utc).AddTicks(1303),
                            PasswordHash = "$2a$11$27.bjFvfqkNLGWFv.JvLketbzf6X32V2ArSgOwVLSZktJJJm4pE2q",
                            Role = 0,
                            UserName = "User1"
                        },
                        new
                        {
                            Id = new Guid("86033173-51f7-4a31-911f-4afc1022a1d7"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 41, 59, 9, DateTimeKind.Utc).AddTicks(7955),
                            PasswordHash = "$2a$11$LxxvuHuNzt/VWYDrqIfnwu0nkqXl1iLfqmrlL7RL31Yfs0AbQy/py",
                            Role = 1,
                            UserName = "User2"
                        },
                        new
                        {
                            Id = new Guid("8cd1ed42-b707-4fd8-a050-a77283f6972b"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 41, 59, 203, DateTimeKind.Utc).AddTicks(8213),
                            PasswordHash = "$2a$11$fGKU5kYs44Xwk2sSmcwVn.hVYgI8Lnw/3iq1XxE67mYOhUbRfEIfu",
                            Role = 0,
                            UserName = "User3"
                        },
                        new
                        {
                            Id = new Guid("7354465e-9813-451b-a339-dd1ca1c8f50f"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 41, 59, 391, DateTimeKind.Utc).AddTicks(6082),
                            PasswordHash = "$2a$11$rNIgG1xwAVLHocgYGnyR6exBx9g9emPImkNcTZFLuytZpNl5OEnjm",
                            Role = 1,
                            UserName = "User4"
                        },
                        new
                        {
                            Id = new Guid("1f21d873-568b-4468-89b2-7e43c860a46a"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 41, 59, 585, DateTimeKind.Utc).AddTicks(788),
                            PasswordHash = "$2a$11$tDcmaD.777fgENXslhwpAuQTELz7MYOsjbHZF6V42As1Wb0yeBTti",
                            Role = 0,
                            UserName = "User5"
                        },
                        new
                        {
                            Id = new Guid("f9d711bd-3803-4adb-afd5-de7465a2b4c6"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 41, 59, 776, DateTimeKind.Utc).AddTicks(1949),
                            PasswordHash = "$2a$11$vfA3Kq/6YB8dxT/tEs87NOee0v70jGWAfz9RQ2DVtfQmagsWMoYBm",
                            Role = 1,
                            UserName = "User6"
                        },
                        new
                        {
                            Id = new Guid("148170c6-7910-44c2-91da-a24b72a0e269"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 41, 59, 968, DateTimeKind.Utc).AddTicks(2117),
                            PasswordHash = "$2a$11$bDLZvRCmYI39r6QSr3G.m.DHbRby/QWpSVtXS8T6L66DhPzR6BWTi",
                            Role = 0,
                            UserName = "User7"
                        },
                        new
                        {
                            Id = new Guid("5e91f86e-2708-46a1-a6f1-d810c6ed247e"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 42, 0, 167, DateTimeKind.Utc).AddTicks(8489),
                            PasswordHash = "$2a$11$OQek1tLuF/QiZy/PtJaE5u50e6MxIfhKSbfPblq7Tu5VAdY0Sk1pS",
                            Role = 1,
                            UserName = "User8"
                        },
                        new
                        {
                            Id = new Guid("cb3c6c5c-a8a5-433f-bdbf-6998c620aafb"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 42, 0, 360, DateTimeKind.Utc).AddTicks(9855),
                            PasswordHash = "$2a$11$/4n.1IAAkRVGLdT3Hw6LauvyenzlJcASvaUC634Lln0yHdlOJ7wAe",
                            Role = 0,
                            UserName = "User9"
                        },
                        new
                        {
                            Id = new Guid("524ce4f8-dc6a-4565-88c7-b8ee2cde8be9"),
                            CreatedAt = new DateTime(2025, 8, 13, 0, 42, 0, 558, DateTimeKind.Utc).AddTicks(9712),
                            PasswordHash = "$2a$11$V9Ep5GILQlok.MYJtwMROOM/9W95EMrKkMeWZFY9BXSbH9HpCqtZe",
                            Role = 1,
                            UserName = "User10"
                        });
                });

            modelBuilder.Entity("TaskTrackerAPI.Domain.Models.Task", b =>
                {
                    b.HasOne("TaskTrackerAPI.Domain.Models.User", "AssignTo")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignTo");
                });

            modelBuilder.Entity("TaskTrackerAPI.Domain.Models.User", b =>
                {
                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
